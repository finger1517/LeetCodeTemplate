# 计算最低票价
# 详细描述
# 在一个火车旅行很受欢迎的国度，你提前一年计划了一些火车旅行。在接下来的一年里，你要旅行的日子将以一个名为 days 的数组给出。每一项是一个从 1 到 365 的整数。

# 火车票有三种不同的销售方式：

# 一张为期一天的通行证售价为 costs[0] 美元；
# 一张为期七天的通行证售价为 costs[1] 美元；
# 一张为期三十天的通行证售价为 costs[2] 美元。
# 通行证允许数天无限制的旅行。 例如，如果我们在第 2 天获得一张为期 7 天的通行证，那么我们可以连着旅行 7 天：第 2 天、第 3 天、第 4 天、第 5 天、第 6 天、第 7 天和第 8 天。

# 返回你想要完成在给定的列表 days 中列出的每一天的旅行所需要的最低消费。

# 其他
# 时间限制: 1000ms

# 内存限制: 256.0MB

# 输入输出描述
# 输入描述
# 第一行为需要旅行的日子的数组，即days数组，如[1,2,3,4,5,6,7,8,9,10,30,31]

# 第二行为通行证售价，即costs数组，如[2,7,15]

# 输出描述
# 一个数字，为满足旅行条件的费用的总和，示例中答案应为17

# 具体旅行计划如下：

# 在第 1 天，你花了 costs[2] = $15 买了一张为期 30 天的通行证，它将在第 1, 2, ..., 30 天生效。
# 在第 31 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 31 天生效。 
# 你总共花了 $17，并完成了你计划的每一天旅行。

# 备注
# 以下是根据题意整理出来的一些约束条件：

# 1 <= days.length <= 365

# 1 <= days[i] <= 365

# days 按顺序严格递增

# costs.length == 3

# 1 <= costs[i] <= 1000

# 输入输出示例
# 示例1
# 输入
# 复制
# [1,4,6,7,8,20]
# [2,7,15]
# 输出
# 复制
# 11
# 说明
# 在第 1 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 1 天生效。
# 在第 3 天，你花了 costs[1] = $7 买了一张为期 7 天的通行证，它将在第 3, 4, ..., 9 天生效。
# 在第 20 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 20 天生效。
# 你总共花了 $11，并完成了你计划的每一天旅行。
# 示例2
# 输入
# 复制
# [1,2,3,4,5,6,7,8,9,10,30,31]
# [2,7,15]
# 输出
# 复制
# 17
# 说明
# 在第 1 天，你花了 costs[2] = $15 买了一张为期 30 天的通行证，它将在第 1, 2, ..., 30 天生效。
# 在第 31 天，你花了 costs[0] = $2 买了一张为期 1 天的通行证，它将在第 31 天生效。
# 你总共花了 $17，并完成了你计划的每一天旅行。

days = list(map(int,input()[1:-1].split(",")))
costs = list(map(int,input()[1:-1].split(",")))


def mincostTickets(days, costs):
    N = len(days)
    durations = [1, 7, 30]

    # @lru_cache(None)
    def dp(i):
        if i >= N:
            return 0
        ans = 10**9
        j = i
        for c, d in zip(costs, durations):
            while j < N and days[j] < days[i] + d:
                j += 1
            ans = min(ans, dp(j) + c)
        return ans

    return dp(0)

print(mincostTickets(days,costs))